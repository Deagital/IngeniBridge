//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace IngeniBridge.TestServer.IngeniBridgeProxy
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class RequesterClient 
    {
        private string _baseUrl = "http://demo.ingenibridge.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public RequesterClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Retrieves the assets</summary>
        /// <param name="correlationCriteria">Correlation creteria containing [axis]=[value] or use ! for [different than]</param>
        /// <param name="pageNumber">Page number starting from 0</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="snapshotDate">The snapshot date used to retrive the valid elements</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContextedAsset>> RetrieveAssetsAsync(System.Collections.Generic.IEnumerable<string> correlationCriteria, int? pageNumber, int? pageSize, string callingApplication, System.DateTimeOffset? snapshotDate, string dBVersion)
        {
            return RetrieveAssetsAsync(correlationCriteria, pageNumber, pageSize, callingApplication, snapshotDate, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves the assets</summary>
        /// <param name="correlationCriteria">Correlation creteria containing [axis]=[value] or use ! for [different than]</param>
        /// <param name="pageNumber">Page number starting from 0</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="snapshotDate">The snapshot date used to retrive the valid elements</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContextedAsset>> RetrieveAssetsAsync(System.Collections.Generic.IEnumerable<string> correlationCriteria, int? pageNumber, int? pageSize, string callingApplication, System.DateTimeOffset? snapshotDate, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveAssets?");
            if (correlationCriteria != null) 
            {
                foreach (var item_ in correlationCriteria) { urlBuilder_.Append("CorrelationCriteria=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pageNumber != null) 
            {
                urlBuilder_.Append("PageNumber=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (snapshotDate != null) 
            {
                urlBuilder_.Append("SnapshotDate=").Append(System.Uri.EscapeDataString(snapshotDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ContextedAsset>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<ContextedAsset>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ContextedAsset>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves the asset types</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveAssetTypesAsync(string callingApplication, string dBVersion)
        {
            return RetrieveAssetTypesAsync(callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves the asset types</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveAssetTypesAsync(string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveAssetTypes?");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves the time series</summary>
        /// <param name="correlationCriteria">Correlation creteria containing [axis]=[value] or use ! for [different than]</param>
        /// <param name="pageNumber">Page number starting from 0</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="snapshotDate">The snapshot date used to retrive the valid elements</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContextedTimeSeries>> RetrieveTimeSeriesAsync(System.Collections.Generic.IEnumerable<string> correlationCriteria, int? pageNumber, int? pageSize, string callingApplication, System.DateTimeOffset? snapshotDate, string dBVersion)
        {
            return RetrieveTimeSeriesAsync(correlationCriteria, pageNumber, pageSize, callingApplication, snapshotDate, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves the time series</summary>
        /// <param name="correlationCriteria">Correlation creteria containing [axis]=[value] or use ! for [different than]</param>
        /// <param name="pageNumber">Page number starting from 0</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="snapshotDate">The snapshot date used to retrive the valid elements</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContextedTimeSeries>> RetrieveTimeSeriesAsync(System.Collections.Generic.IEnumerable<string> correlationCriteria, int? pageNumber, int? pageSize, string callingApplication, System.DateTimeOffset? snapshotDate, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveTimeSeries?");
            if (correlationCriteria != null) 
            {
                foreach (var item_ in correlationCriteria) { urlBuilder_.Append("CorrelationCriteria=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pageNumber != null) 
            {
                urlBuilder_.Append("PageNumber=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (snapshotDate != null) 
            {
                urlBuilder_.Append("SnapshotDate=").Append(System.Uri.EscapeDataString(snapshotDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<ContextedTimeSeries>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<ContextedTimeSeries>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<ContextedTimeSeries>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves the timeseries</summary>
        /// <param name="searchString">String search</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatavizTimeSeries>> RetrieveDatavizTimeSeriesAsync(string searchString, int? pageSize, string dBVersion)
        {
            return RetrieveDatavizTimeSeriesAsync(searchString, pageSize, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves the timeseries</summary>
        /// <param name="searchString">String search</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DatavizTimeSeries>> RetrieveDatavizTimeSeriesAsync(string searchString, int? pageSize, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (searchString == null)
                throw new System.ArgumentNullException("searchString");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveDatavizTimeSeries?");
            urlBuilder_.Append("SearchString=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageSize != null) 
            {
                urlBuilder_.Append("PageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<DatavizTimeSeries>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<DatavizTimeSeries>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<DatavizTimeSeries>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves an entity (asset or time series) using the path in tree (concatenate parents with backslashes)</summary>
        /// <param name="pathInTree">Path in the tree</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContextedAsset> RetrieveEntityFromPathAsync(string pathInTree, string callingApplication, string dBVersion)
        {
            return RetrieveEntityFromPathAsync(pathInTree, callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves an entity (asset or time series) using the path in tree (concatenate parents with backslashes)</summary>
        /// <param name="pathInTree">Path in the tree</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ContextedAsset> RetrieveEntityFromPathAsync(string pathInTree, string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (pathInTree == null)
                throw new System.ArgumentNullException("pathInTree");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveEntityFromPath?");
            urlBuilder_.Append("PathInTree=").Append(System.Uri.EscapeDataString(ConvertToString(pathInTree, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ContextedAsset); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContextedAsset>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ContextedAsset);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves the time series types</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveTimeSeriesTypesAsync(string callingApplication, string dBVersion)
        {
            return RetrieveTimeSeriesTypesAsync(callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves the time series types</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveTimeSeriesTypesAsync(string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveTimeSeriesTypes?");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves all the functional axis available to request a type of entity</summary>
        /// <param name="entityName">The entity type name</param>
        /// <param name="callingApplication">The calling application or null (if null then par  application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveEntityFunctionalAxisAsync(string entityName, string callingApplication, string dBVersion)
        {
            return RetrieveEntityFunctionalAxisAsync(entityName, callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves all the functional axis available to request a type of entity</summary>
        /// <param name="entityName">The entity type name</param>
        /// <param name="callingApplication">The calling application or null (if null then par  application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveEntityFunctionalAxisAsync(string entityName, string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (entityName == null)
                throw new System.ArgumentNullException("entityName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveEntityFunctionalAxis?");
            urlBuilder_.Append("EntityName=").Append(System.Uri.EscapeDataString(ConvertToString(entityName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrive the whole functional axis in an inheritance tree</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FunctionalAxisNode>> RetrieveEntityFunctionalAxisTreeAsync(string callingApplication, string dBVersion)
        {
            return RetrieveEntityFunctionalAxisTreeAsync(callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrive the whole functional axis in an inheritance tree</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FunctionalAxisNode>> RetrieveEntityFunctionalAxisTreeAsync(string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveEntityFunctionalAxisTree?");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<FunctionalAxisNode>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<FunctionalAxisNode>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<FunctionalAxisNode>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieve all values of an Enum type</summary>
        /// <param name="enumName">The Enum type name</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveEnumAvailableValuesAsync(string enumName, string callingApplication, string dBVersion)
        {
            return RetrieveEnumAvailableValuesAsync(enumName, callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve all values of an Enum type</summary>
        /// <param name="enumName">The Enum type name</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveEnumAvailableValuesAsync(string enumName, string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (enumName == null)
                throw new System.ArgumentNullException("enumName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveEnumAvailableValues?");
            urlBuilder_.Append("EnumName=").Append(System.Uri.EscapeDataString(ConvertToString(enumName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieve all the Enum types</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveEnumAvailableTypesAsync(string callingApplication, string dBVersion)
        {
            return RetrieveEnumAvailableTypesAsync(callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieve all the Enum types</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveEnumAvailableTypesAsync(string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveEnumAvailableTypes?");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves the full meta information about the model</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntityMetaDescription>> RetrieveMetaInformationAsync(string callingApplication, string dBVersion)
        {
            return RetrieveMetaInformationAsync(callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves the full meta information about the model</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntityMetaDescription>> RetrieveMetaInformationAsync(string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveMetaInformation?");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<EntityMetaDescription>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<EntityMetaDescription>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<EntityMetaDescription>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves nomenclature values</summary>
        /// <param name="nomenclatureName">The nomenclature</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Nomenclature>> RetrieveNomenclatureAsync(string nomenclatureName, string callingApplication, string dBVersion)
        {
            return RetrieveNomenclatureAsync(nomenclatureName, callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves nomenclature values</summary>
        /// <param name="nomenclatureName">The nomenclature</param>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Nomenclature>> RetrieveNomenclatureAsync(string nomenclatureName, string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (nomenclatureName == null)
                throw new System.ArgumentNullException("nomenclatureName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveNomenclature?");
            urlBuilder_.Append("NomenclatureName=").Append(System.Uri.EscapeDataString(ConvertToString(nomenclatureName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<Nomenclature>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<Nomenclature>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Nomenclature>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves all the nomenclature types available</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveNomenclatureTypesAsync(string callingApplication, string dBVersion)
        {
            return RetrieveNomenclatureTypesAsync(callingApplication, dBVersion, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Retrieves all the nomenclature types available</summary>
        /// <param name="callingApplication">The calling application or null (if null then par application tracking is disabled)</param>
        /// <param name="dBVersion">Database online version or nul if default</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveNomenclatureTypesAsync(string callingApplication, string dBVersion, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/REQUESTER/RetrieveNomenclatureTypes?");
            if (callingApplication != null) 
            {
                urlBuilder_.Append("CallingApplication=").Append(System.Uri.EscapeDataString(ConvertToString(callingApplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dBVersion != null) 
            {
                urlBuilder_.Append("DBVersion=").Append(System.Uri.EscapeDataString(ConvertToString(dBVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<string>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<string>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Asset 
    {
        [Newtonsoft.Json.JsonProperty("TimeSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeSeries> TimeSeries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeginValidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BeginValidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndValidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndValidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HistoryTrackingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HistoryTrackingCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StorageUniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StorageUniqueID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssetEntityKind? EntityKind { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Asset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Asset>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TimeSeries 
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSeriesExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSeriesExternalReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeginValidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BeginValidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndValidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndValidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HistoryTrackingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HistoryTrackingCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StorageUniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StorageUniqueID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeSeriesEntityKind? EntityKind { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TimeSeries FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeSeries>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class HistorizedAsset 
    {
        [Newtonsoft.Json.JsonProperty("Assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextedAsset> Assets { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HistorizedAsset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistorizedAsset>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ContextedAsset 
    {
        [Newtonsoft.Json.JsonProperty("Parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Asset> Parents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Asset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Asset Asset { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ContextedAsset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContextedAsset>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class HistorizedTimeSeries 
    {
        [Newtonsoft.Json.JsonProperty("Datas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextedTimeSeries> Datas { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HistorizedTimeSeries FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistorizedTimeSeries>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ContextedTimeSeries 
    {
        [Newtonsoft.Json.JsonProperty("Parents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Asset> Parents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSeries TimeSeries { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ContextedTimeSeries FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContextedTimeSeries>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Nomenclature 
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeginValidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BeginValidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndValidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndValidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HistoryTrackingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HistoryTrackingCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StorageUniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StorageUniqueID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NomenclatureEntityKind? EntityKind { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Nomenclature FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Nomenclature>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DatavizTimeSeries 
    {
        [Newtonsoft.Json.JsonProperty("DatavizTimeSeriesDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatavizTimeSeriesDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSeriesExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSeriesExternalReference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DatavizTimeSeries FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DatavizTimeSeries>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionalAxisNode 
    {
        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FunctionalAxisNode> Nodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Axis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Axis { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FunctionalAxisNode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionalAxisNode>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EntityMetaDescription 
    {
        [Newtonsoft.Json.JsonProperty("BaseEntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseEntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRoot { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityMetaDescriptionEntityKind? EntityKind { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsAbstract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAbstract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CodeProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeMetaDescription CodeProperty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LabelProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeMetaDescription LabelProperty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttributeMetaDescription> AllLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityDisplayName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EntityMetaDescription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EntityMetaDescription>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AttributeMetaDescription 
    {
        [Newtonsoft.Json.JsonProperty("IsArray", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsArray { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsEnum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExternalReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsTimeSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTimeSeries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsNomenclature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNomenclature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsDescriptionField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDescriptionField { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsExternalTimeSeriesReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExternalTimeSeriesReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeclaringEntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclaringEntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AttributeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributeType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AttributeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NameDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameDesc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NotToDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotToDisplay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexEntityAttribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexEntityAttributeAttribute IndexEntityAttribute { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AttributeMetaDescription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttributeMetaDescription>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class IndexEntityAttributeAttribute 
    {
        [Newtonsoft.Json.JsonProperty("AttributeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FunctionalAxisName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionalAxisName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TypeId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static IndexEntityAttributeAttribute FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexEntityAttributeAttribute>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AssetEntityKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TimeSeries")]
        TimeSeries = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Asset")]
        Asset = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nomenclature")]
        Nomenclature = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TimeSeriesEntityKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TimeSeries")]
        TimeSeries = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Asset")]
        Asset = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nomenclature")]
        Nomenclature = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum NomenclatureEntityKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TimeSeries")]
        TimeSeries = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Asset")]
        Asset = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nomenclature")]
        Nomenclature = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum EntityMetaDescriptionEntityKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TimeSeries")]
        TimeSeries = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Asset")]
        Asset = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nomenclature")]
        Nomenclature = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}