<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JT.TechCases.Threading</name>
    </assembly>
    <members>
        <member name="T:JT.TechCases.Threading.Exceptions.Base">
            <summary>
            This class is the base for all exceptions. It is important so it can be treated by the global handler.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.Base.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.Base.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.ThreadDoWorkCannotBeNull">
            <summary>
            Thread DoWork method cannot be null.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ThreadDoWorkCannotBeNull.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.ErrorCreatingThread">
            <summary>
            Error th creating an Thread.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ErrorCreatingThread.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.ErrorExecutingThread">
            <summary>
            Error during execution of an Thread.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ErrorExecutingThread.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.ErrorProgressingThread">
            <summary>
            Error th calling Thread progress notification function.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ErrorProgressingThread.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ErrorProgressingThread.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.ErrorEndingThread">
            <summary>
            Error th calling Thread progress notification function.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ErrorEndingThread.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.ErrorThreadTitleCannotBeNull">
            <summary>
            Thread title cannot be null.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ErrorThreadTitleCannotBeNull.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.ErrorThreadPoolTitleCannotBeNull">
            <summary>
            Thread pool title cannot be null.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.ErrorThreadPoolTitleCannotBeNull.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.MustCallOutsideTheThread">
            <summary>
            Must call this method outside the thread.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.MustCallOutsideTheThread.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.MustCallInsideTheThread">
            <summary>
            Must call this method inside the thread.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.MustCallInsideTheThread.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.CannotRecycleThread">
            <summary>
            Thread cannot be recycled.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.CannotRecycleThread.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.SemaphoreCannotBeReleased">
            <summary>
            Semaphore cannot be released.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.SemaphoreCannotBeReleased.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.PoolIsBusyExecutingThreads">
            <summary>
            Thread DoWork method cannot be null.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.PoolIsBusyExecutingThreads.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.AbortIsObsolete">
            <summary>
            Abort method is obsolete.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.AbortIsObsolete.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.CannotBeCalledWhileRunning">
            <summary>
            Cannot call this method while thread running.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.CannotBeCalledWhileRunning.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Exceptions.CannotRecycleThreadPool">
            <summary>
            Cannot recycle thread pool after cancellation was requested
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Exceptions.CannotRecycleThreadPool.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.RangeSplitter">
            <summary>
            This class implement range splitting service
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.RangeSplitter.CalcSubRanges(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            This function returns subranges from a whole range
            </summary>
            <param name="LowerBound">Lower bound</param>
            <param name="HigherBound">Higher bound</param>
            <param name="NumberSubRanges">Number of sub ranges to be returned</param>
            <param name="userData">User Data that wiil be rendered in each calculated SubRange</param>
            <returns></returns>
        </member>
        <member name="T:JT.TechCases.Threading.RangeSplitter.SplitedTaskProcessEventHandler">
            <summary>
            Callback for the LaunchSplitedTasks function, process the iteration
            </summary>
            <param name="sr">The SubRange split being processed</param>
            <param name="BoundIndex">the index withn the spitted task iteration</param>
        </member>
        <member name="T:JT.TechCases.Threading.RangeSplitter.SplitedTaskInitUserDataEventHandler">
            <summary>
            Callback for the LaunchSplitedTasks function, initialize UserData into SubRange structure
            </summary>
            <param name="sr">The SubRange structure where to set UserData data</param>
        </member>
        <member name="M:JT.TechCases.Threading.RangeSplitter.LaunchSplitedTasks(System.Int32,System.Int32,System.Int32,JT.TechCases.Threading.RangeSplitter.SplitedTaskProcessEventHandler,JT.TechCases.Threading.RangeSplitter.SplitedTaskInitUserDataEventHandler)">
            <summary>
            This method drives a splitted task for each iteration in callback
            </summary>
            <param name="LowerBound">The lower bound of the range (included)</param>
            <param name="HigherBound">The higher bound of the range (excluded)</param>
            <param name="NumberSubRanges">The number of parallel iterations (driven by a dedicated pool)</param>
            <param name="stpeh">Process callback</param>
            <param name="stiudeh">Init UserData callback</param>
        </member>
        <member name="T:JT.TechCases.Threading.SubRange">
            <summary>
            This class contains a subrange
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.SubRange.LowerBound">
            <summary>
            Lower bound
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.SubRange.HigherBound">
            <summary>
            Higher bound
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.SubRange.UserData">
            <summary>
            User Data  that was passed at first call
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.ReaderWriterLock">
            <summary>
            The same as System.Threading class but without timeouts (wich is semantically nonsense)
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ReaderWriterLock.WaitForRead">
            <summary>
            Wait for entering a multiple read operation
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ReaderWriterLock.FinishedRead">
            <summary>
            release read operation
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ReaderWriterLock.WaitForWrite">
            <summary>
            Wait for entering a single write operation
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ReaderWriterLock.FinishedWrite">
            <summary>
            release write operation
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ReaderWriterLock.ToString">
            <summary>
            displays object
            </summary>
            <returns></returns>
        </member>
        <member name="T:JT.TechCases.Threading.Semaphore">
            <summary>
            This class implements a monitorable semephore
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Semaphore.#ctor(System.Int32)">
            <summary>Constructor</summary>
            <param name="iCountMax">Max value of the semaphore</param>
        </member>
        <member name="M:JT.TechCases.Threading.Semaphore.WaitAndAcquire">
            <summary>Acquires the semaphoer</summary>
        </member>
        <member name="M:JT.TechCases.Threading.Semaphore.Release">
            <summary>Releases the semaphore</summary>
        </member>
        <member name="M:JT.TechCases.Threading.Semaphore.WaitForReinit">
            <summary>Wait for the semaphore to come back down to 0</summary>
        </member>
        <member name="P:JT.TechCases.Threading.Semaphore.Count">
            <summary>
            This property returns the actual count of the semaphore
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Semaphore.ToString">
            <summary>
            displays object
            </summary>
            <returns></returns>
        </member>
        <member name="T:JT.TechCases.Threading.Semaphore.SemaphoreIsResetEventHandler">
            <summary>
            Callback function when semaphore is reset
            </summary>
        </member>
        <member name="E:JT.TechCases.Threading.Semaphore.OnSemaphoreIsResetEventHandler">
            <summary>
            Event to subscribe to notifications.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Thread">
            <summary>
            This class encapsulate a thread in the ADF framework.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Thread.Priority">
            <summary>
            Priority of the thread.
            </summary>
        </member>
        <member name="F:JT.TechCases.Threading.Thread.Priority.Normal">
            <summary>
            Maps to normal state.
            </summary>
        </member>
        <member name="F:JT.TechCases.Threading.Thread.Priority.Low">
            <summary>
            Maps to lowest state.
            </summary>
        </member>
        <member name="F:JT.TechCases.Threading.Thread.MAX_SECONDS_CANCELLATIONPENDINGCALL">
            <summary>
            The maximum amount of seconds an application must call CancelationPending property
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.Title">
            <summary>
            Title of the thread.
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.IsCancellationRequested">
            <summary>
            Indicates wether cancellation has been requested, this is monitored from outside the thread,
            to check the status from within the thread, call source.CheckStatus ()
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.IsInSleep">
            <summary>
            Indicates if the thread entered a sleep state
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.PercentProgress">
            <summary>
            Current progression percentage
            </summary>
            <returns>The value of progress</returns>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.DescriptionProgress">
            <summary>
            Current progression description
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.Started">
            <summary>
            Indicates wether the thread is started
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.ThreadPriority">
            <summary>
            Thread priority.
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.OwnerPool">
            <summary>
            This property erturns the owner pool
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.UserData">
            <summary>
            This property returns user data
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.InLongTreatment">
            <summary>
            This property indicates if the thread is running a long treatment
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.DoWorkException">
            <summary>
            This property is set after the thread completed with an exception
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.GetHashCode">
            <summary>
            This is an override because sometimes it may return the same key ...
            </summary>
            <returns></returns>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.Start">
            <summary>
            Starts the thread as STA by default
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.Start(System.Threading.ApartmentState)">
            <summary>
            Starts the thread.
            </summary>
            <param name="state">the apartment state</param>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.StartLater">
            <summary>
            Starts later the thread as STA by default
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.StartLater(System.Threading.ApartmentState)">
            <summary>
            Starts the thread but later.
            </summary>
            <param name="state">the apartment state</param>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.ReportProgress(System.Int32,System.String)">
            <summary>
            This method reports thread progression.
            </summary>
            <param name="percentProgress">Percent progression</param>
            <param name="descriptionProgress">Description of the current step in progression</param>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.RequestCancellation">
            <summary>
            Requests cancellation for the thread.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.IsThreadNotResponding">
            <summary>
            Indicates wether the thread is not responding.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JT.TechCases.Threading.Thread.DoWorkEventHandler">
            <summary>
            Callback function of the thread function
            </summary>
            <param name="source">The igniting Thread</param>
        </member>
        <member name="E:JT.TechCases.Threading.Thread.OnDoWorkEventHandler">
            <summary>
            Event to subscribe to notifications.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Thread.ProgressChangedEventHandler">
            <summary>
            Callback function of the thread progression
            </summary>
            <param name="source">The igniting Thread</param>
            <param name="percentProgress">Percent of progression</param>
            <param name="descriptionProgress">Description of the progression</param>
        </member>
        <member name="E:JT.TechCases.Threading.Thread.OnProgressChangedEventHandler">
            <summary>
            Event to subscribe to notifications.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Thread.RunWorkerCompletedEventHandler">
            <summary>
            Callback function of thread termination
            </summary>
            <param name="source"></param>
        </member>
        <member name="E:JT.TechCases.Threading.Thread.OnRunWorkerCompletedEventHandler">
            <summary>
            Event to subscribe to notifications.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Thread.UnhandledExceptionEventHandler">
            <summary>
            Callback to the exception handler in the thread execution.
            </summary>
            <param name="source">The igniting Thread</param>
            <param name="exc">The exception</param>
        </member>
        <member name="E:JT.TechCases.Threading.Thread.OnUnhandledExceptionEventHandler">
            <summary>
            Event to subscribe to notifications.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Thread.CancellationRequested">
            <summary>
            Callback to notify the thread cancellation.
            </summary>
            <param name="source">The igniting Thread</param>
        </member>
        <member name="E:JT.TechCases.Threading.Thread.OnCancellationRequested">
            <summary>
            Event to subscribe to notifications.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.CallControlAwareEvent(System.Delegate,System.Object[])">
            <summary>
            This method calls all the delegates attached to an event
            </summary>
            <param name="evt">the event</param>
            <param name="lstParams">the event parameters</param>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.CallControlAwareEvent(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            This method calls all the delegates attached to an event
            </summary>
            <param name="evt">the event</param>
            <param name="lstParams">the event parameters</param>
            <param name="waitControlResult">wait or not for the completion</param>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.CallControlAwareDelegate(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            This method calls one delegate and checks if the origin is a winform
            </summary>
            <param name="del">the delegate</param>
            <param name="lstParams">the delegate parameters</param>
            <param name="waitControlResult">wait or not for the winform to return</param>
            <returns>the object returned from the delegate</returns>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.Abort">
            <summary>
            Abort must not be called
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.WaitFinished">
            <summary>
            This method waits for the thread to finish
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.WaitFinished(System.Int32)">
            <summary>
            This method waits for the thread to finish
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.Suspended">
            <summary>
            This property indicates if the thread is suspended
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.Suspend">
            <summary>
            Suspends this instance, must be called from outside the thread.
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.Thread.Status">
            <summary>
            The status of the current thread
            </summary>
        </member>
        <member name="F:JT.TechCases.Threading.Thread.Status.ResumedFromSuspended">
            <summary>
            The thread was suspended and was resumed
            </summary>
        </member>
        <member name="F:JT.TechCases.Threading.Thread.Status.CancellationRequested">
            <summary>
            Cancellation has been requested, the thread must return execution immediatly
            </summary>
        </member>
        <member name="F:JT.TechCases.Threading.Thread.Status.Running">
            <summary>
            The thread is running normally
            </summary>
        </member>
        <member name="F:JT.TechCases.Threading.Thread.Status.InSleep">
            <summary>
            The thread is in a sleep instruction
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.CheckStatus">
            <summary>
            This method returns the status of the thread, note that this method will handle the suspend mode 
            and must be called from within the thread
            </summary>
            <returns>The actual status</returns>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.ResetCurrentSleep">
            <summary>
            This method resets the current sleep, if any
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.Sleep(System.Int32)">
            <summary>
            This method enters the thread into sleep mode, but will be automatically cancelled when calling RequestCancellation,
            note that it must be called from within the thread
            </summary>
            <param name="iMilliseconds"></param>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.HasCompletedRun">
            <summary>
            Indicates wether the thread run and terminated at least once
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.Thread.SetDoWorkException(System.Exception)">
            <summary>
            This method lets the developer set the exception from within the DoWork body
            so it is possible to gest it the termination 
            </summary>
            <param name="exc">the actual exception</param>
        </member>
        <member name="P:JT.TechCases.Threading.Thread.ExecutionTime">
            <summary>
            Returns the execution time spent by the thread (cannot be called before termination)
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.ThreadPool">
            <summary>
            This class maintains a list of threads and is the only access point to create new ADFThreads.
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.ThreadPool.Threads">
            <summary>
            This property returns the threads inside the pool
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.ThreadPool.UserData">
            <summary>
            This property returns user data
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.ThreadPool.Title">
            <summary>
            Title of the pool.
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.ThreadPool.PoolSize">
            <summary>
            The ThreadPool size
            </summary>
        </member>
        <member name="P:JT.TechCases.Threading.ThreadPool.ExecutionTime">
            <summary>
            Returns the execution time spent by the thread (cannot be called before termination)
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.CreateNew(System.Int32,System.Object)">
            <summary>
            This method creates a new pool
            </summary>
            <param name="poolSize">size of the pool</param>
            <param name="userData">user data held into the pool</param>
            <returns>the pool</returns>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.CreateNew(System.String,System.Int32,System.Object)">
            <summary>
            This method creates a new pool using a default and shared title, if the titled pool does exist then it is simply returned for resue
            </summary>
            <param name="title">title of the pool</param>
            <param name="poolSize">size of the pool</param>
            <param name="userData">user data held into the pool</param>
            <returns>the pool</returns>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.CreateNewAndUnique(System.String,System.Int32,System.Object)">
            <summary>
            This method creates a new pool using a default and unique title, if the titled pool does exist then a new title is created with unique appended counter 
            </summary>
            <param name="title">title of the pool</param>
            <param name="poolSize">size of the pool</param>
            <param name="userData">user data held into the pool</param>
            <returns>the pool</returns>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.Remove(JT.TechCases.Threading.ThreadPool)">
            <summary>
            This method removes a pool
            </summary>
            <param name="pool">the pool to remove</param>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.FindByName(System.String)">
            <summary>
            This method retrieve a pool by name
            </summary>
            <param name="n">the pool name</param>
            <returns></returns>
        </member>
        <member name="P:JT.TechCases.Threading.ThreadPool.AllocatedPools">
            <summary>
            This property returns the allocated pools
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.CreateThread(System.String,JT.TechCases.Threading.Thread.DoWorkEventHandler,JT.TechCases.Threading.Thread.RunWorkerCompletedEventHandler,JT.TechCases.Threading.Thread.ProgressChangedEventHandler,JT.TechCases.Threading.Thread.CancellationRequested,System.Object)">
            <summary>
            This method creates a thread.
            </summary>
            <param name="title">The title of the thread</param>
            <param name="doWork">The DoWork callback function that implements thread execution, cannot be null</param>
            <param name="endWork">The EndWork callback function that notifies thread termination</param>
            <param name="progressWork">The ProgressWork callback function that notifies thread progression</param>
            <param name="cancellationRequested">The cancel thread notification method</param>
            <param name="userData">user data</param>
            <returns>The Thread</returns>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.CreateThread(System.String,JT.TechCases.Threading.Thread.DoWorkEventHandler,JT.TechCases.Threading.Thread.RunWorkerCompletedEventHandler,JT.TechCases.Threading.Thread.ProgressChangedEventHandler)">
            <summary>
            This method creates a thread.
            </summary>
            <param name="title">The title of the thread</param>
            <param name="doWork">The DoWork callback function that implements thread execution, cannot be null</param>
            <param name="endWork">The EndWork callback function that notifies thread termination</param>
            <param name="progressWork">The ProgressWork callback function that notifies thread progression</param>
            <returns>The Thread</returns>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.CreateThread(System.String,JT.TechCases.Threading.Thread.DoWorkEventHandler,JT.TechCases.Threading.Thread.RunWorkerCompletedEventHandler,JT.TechCases.Threading.Thread.ProgressChangedEventHandler,System.Object)">
            <summary>
            This method creates a thread.
            </summary>
            <param name="title">The title of the thread</param>
            <param name="doWork">The DoWork callback function that implements thread execution, cannot be null</param>
            <param name="endWork">The EndWork callback function that notifies thread termination</param>
            <param name="progressWork">The ProgressWork callback function that notifies thread progression</param>
            <param name="userData">user data</param>
            <returns>The Thread</returns>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.RequestCancellationAll">
            <summary>
            This methods requests cancellation on all running threads
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.WaitAllFinished">
            <summary>
            This method will wait for all threads to complete
            </summary>
        </member>
        <member name="M:JT.TechCases.Threading.ThreadPool.JoinAll">
            <summary>
            Wait for completion of all threads in this pool
            </summary>
        </member>
        <member name="E:JT.TechCases.Threading.ThreadPool.OnUnhandledExceptionEventHandler">
            <summary>
            Event to subscribe to exception notifications.
            </summary>
        </member>
        <member name="E:JT.TechCases.Threading.ThreadPool.OnUnhandledThreadExceptionEventHandler">
            <summary>
            Event to subscribe to exception notifications.
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.ThreadPool.PoolListChangedHandler">
            <summary>
            This delegate will notify when the pool changes
            </summary>
        </member>
        <member name="E:JT.TechCases.Threading.ThreadPool.OnPoolListChangedHandler">
            <summary>
            Event to subscribe
            </summary>
        </member>
        <member name="T:JT.TechCases.Threading.ThreadPool.ThreadsTerminatedHandler">
            <summary>
            This delegate will notify when the threads terminate
            </summary>
            <param name="source">the owner pool</param>
        </member>
        <member name="E:JT.TechCases.Threading.ThreadPool.OnThreadsTerminatedHandler">
            <summary>
            Event to subscribe
            </summary>
        </member>
    </members>
</doc>
